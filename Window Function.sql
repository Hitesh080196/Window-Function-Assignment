-- 1. **Rank the customers based on the total amount they've spent on rentals.**

-- with CTE
WITH TotalSpending AS (
    SELECT customer_id,SUM(amount) AS total_amount_spent
    FROM payment
    GROUP BY customer_id
)
SELECT customer_id,total_amount_spent,DENSE_RANK() OVER (ORDER BY total_amount_spent DESC) AS ranking
FROM TotalSpending
ORDER BY ranking;

-- with subquery 
select customer_id,total_amount_spent,dense_rank() over(order by total_amount_spent desc) as ranking
from (
select customer_id,sum(amount) as total_amount_spent
from payment
group by customer_id
) as TotalSpending
order by ranking;





-- 2. **Calculate the cumulative revenue generated by each film over time.**
-- with CTE
with RevenuePerFilm as(
select title,sum(amount) as total_revenue	
from film f
left join inventory i on i.film_id = f.film_id
left join rental r on r.inventory_id = i.inventory_id
left join payment p on p.customer_id = r.customer_id
group by title
),
CommulativeRevenue as (
select title,total_revenue 
from RevenuePerFilm
group by title
)
select title,SUM(total_revenue) 
OVER (ORDER BY title ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_revenue
FROM CommulativeRevenue
order by title;

-- with subquery
select title, sum(total_revenue) over(order by title ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) 
as commulative_revenue
from (
select title,sum(amount) as total_revenue														
from film f
left join inventory i on i.film_id = f.film_id
left join rental r on r.inventory_id = i.inventory_id
left join payment p on p.customer_id = r.customer_id
group by title
) as revenuePerFilm
group by title;





-- 3. **Determine the average rental duration for each film, considering films with similar lengths.**
SELECT film_id,length,rental_duration,AVG(rental_duration) OVER (PARTITION BY length) as AvgRentalDuration
FROM film	
order by length;






-- 4. **Identify the top 3 films in each category based on their rental counts.**

-- With CTE
with category_info as (
select f.title , c.name ,f.rental_rate
from film f
inner join film_category fc on fc.film_id = f.film_id
inner join category c on c.category_id = fc.category_id
),
ranked_film as (
select title,name,rental_rate as rental_count ,row_number()over(partition by name order by rental_rate desc) as rn
from category_info
)
select title,name,rn
from ranked_film
where rn <= 3
order by name,rn;

-- with subquery
SELECT title, name, rn
FROM (
    SELECT title, name, rental_rate,
           ROW_NUMBER() OVER (PARTITION BY name ORDER BY rental_rate DESC) AS rn
    FROM film f
    INNER JOIN film_category fc ON fc.film_id = f.film_id
    INNER JOIN category c ON c.category_id = fc.category_id
) AS ranked_film
WHERE rn <= 3
ORDER BY name, rn;





-- 5. **Calculate the difference in rental counts between each customer's total rentals and the average rentals
-- across all customers.**
select customer_id,total_rentals,avg_rentals,total_rentals - avg_rentals AS rental_difference
FROM ( 
select customer_id,count(rental_id) as total_rentals,avg(count(rental_id)) over() as avg_rentals
from payment 
group by customer_id
) as Rental_data
order by customer_id;






-- 6. **Find the monthly revenue trend for the entire rental store over time.**

-- subquery
select month,total_revenue,last_month_revenue,total_revenue-last_month_revenue as Trend
from(
select month,total_revenue,lag(total_revenue) over(order by month) as last_month_revenue
from(
select date_format(payment_date, "%y-%m") as month,sum(amount) as total_revenue
from payment
group by date_format(payment_date, "%y-%m")
) as monthly_revenue
) as revenue_trend
order by month;

-- CTE
with monthly_revenue as (
select date_format(payment_date,"%y-%m") as month,sum(amount) as total_revenue
from payment
group by date_format(payment_date,"%y-%m")
),
revenue_trend as (
select month,total_revenue,lag(total_revenue)over(order by month)as last_month_revenue
from monthly_revenue
)
select month,total_revenue,last_month_revenue,total_revenue-last_month_revenue as Trend
from revenue_trend
order by month;





-- 7. **Identify the customers whose total spending on rentals falls within the top 20% of all customers.**
with monthly_spending as (
select customer_id as customers,sum(amount) as total_spending 
from payment
group by customer_id
),
Ranked_customers as (
select customers,total_spending ,ntile(5) over(order by total_spending desc) as ranking
from monthly_spending
)
select customers , total_spending
from Ranked_customers
where ranking = 1
order by total_spending desc;




-- 8. **Calculate the running total of rentals per category, ordered by rental count.**

SELECT category_id,category_name,film_id,title,rental_count,
    SUM(rental_count) OVER (PARTITION BY category_id 
    ORDER BY rental_count DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_total
FROM (
SELECT cat.category_id,cat.name AS category_name,f.film_id,f.title,COUNT(r.rental_id) AS rental_count
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category cat ON fc.category_id = cat.category_id
GROUP BY cat.category_id,cat.name,f.film_id,f.title
) AS FilmRentalCounts
ORDER BY category_id,rental_count DESC;





-- 9. **Find the films that have been rented less than the average rental count for their respective categories.**


WITH FilmRentalCounts AS (
SELECT cat.category_id,f.film_id,f.title,COUNT(r.rental_id) AS rental_count
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category cat ON fc.category_id = cat.category_id
GROUP BY cat.category_id,f.film_id,f.title
),
CategoryAvg AS (
SELECT category_id,film_id,title,rental_count,AVG(rental_count) OVER (PARTITION BY category_id) AS avg_rental_count
FROM FilmRentalCounts
)
SELECT film_id,title,rental_count,avg_rental_count
FROM CategoryAvg
WHERE rental_count < avg_rental_count
ORDER BY film_id;





-- 10. **Identify the top 5 months with the highest revenue and display the revenue generated in each month.**

-- Window Function
WITH MonthlyRevenue AS (
    SELECT date_format( payment_date,'%Y-%m') AS month, SUM(amount) AS total_revenue 
    FROM payment GROUP BY month
),
RankedRevenue AS (
    SELECT month, total_revenue,ROW_NUMBER() OVER (ORDER BY total_revenue DESC) AS ranking
    FROM MonthlyRevenue
)
SELECT
month,total_revenue
FROM RankedRevenue
WHERE ranking <= 5
ORDER BY total_revenue DESC;

-- Simple Way
SELECT DATE_FORMAT(payment_date, '%Y-%m') AS month,SUM(amount) AS total_revenue
FROM payment
GROUP BY month
ORDER BY total_revenue DESC;